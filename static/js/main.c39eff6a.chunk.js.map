{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/ItemToggleAllCompleted/ItemToggleAllCompleted.js","components/Header.js","components/ItemStatusFilter/ItemStatusFilter.js","components/ItemClearCompleted/ItemClearCompleted.js","components/TodoLeftCounter/TodoLeftCounter.js","components/Footer.js","App.js","index.js"],"names":["TodoItem","id","todo","onDeleted","onToggle","completed","classNames","className","key","type","checked","onClick","htmlFor","TodoList","todos","map","ItemToggleAllCompleted","onToggleDoneAll","Header","state","todoText","onInputChange","event","setState","target","value","onSubmit","preventDefault","props","addNewTodo","this","placeholder","onChange","React","Component","ItemStatusFilter","links","name","label","url","filter","onFilterChange","href","ItemClearCompleted","clearHandler","completedTodos","TodoLeftCounter","done","Footer","todosCount","doneCount","App","deleteTodo","index","findIndex","slice","text","trim","length","prevState","toggleProperty","arr","filterAll","filterTodo","items","item","visibleTodos","unCompletedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c39eff6a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function TodoItem({\n  id,\n  todo,\n  onDeleted,\n  onToggle,\n  completed,\n}) {\n  const classNames = completed ? 'completed' : '';\n\n  return (\n    <li\n      className={classNames}\n      key={id}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onClick={onToggle}\n          className=\"toggle\"\n          id={`todo-${id}`}\n        />\n        <label htmlFor={`todo-${id}`}>{todo}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={onDeleted}\n        />\n      </div>\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  todo: PropTypes.string.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nexport function TodoList({\n  todos,\n  onDeleted,\n  onToggle,\n}) {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo.todo}\n          completed={todo.completed}\n          id={todo.id}\n          key={todo.id}\n          onDeleted={() => onDeleted(todo.id)}\n          onToggle={() => onToggle(todo.id)}\n        />\n      ))}\n    </ul>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function ItemToggleAllCompleted({ todos, onToggleDoneAll }) {\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onClick={() => onToggleDoneAll(todos)}\n      />\n      <label\n        htmlFor=\"toggle-all\"\n      >\n        Mark all as complete\n      </label>\n    </>\n  );\n}\n\nItemToggleAllCompleted.propTypes = {\n  todos: PropTypes.arrayOf.isRequired,\n  onToggleDoneAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ItemToggleAllCompleted from\n  './ItemToggleAllCompleted/ItemToggleAllCompleted';\n\nclass Header extends React.Component {\n  state = {\n    todoText: '',\n  }\n\n  onInputChange = (event) => {\n    this.setState({\n      todoText: event.target.value,\n    });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    this.props.addNewTodo(this.state.todoText);\n    this.setState({\n      todoText: '',\n    });\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <form\n          className=\"item-add-form\"\n          onSubmit={this.onSubmit}\n        >\n          <h1>todos</h1>\n          <ItemToggleAllCompleted\n            onToggleDoneAll={this.props.onToggleDoneAll}\n            todos={this.props.todos}\n          />\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.onInputChange}\n            value={this.state.todoText}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n  onToggleDoneAll: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf.isRequired,\n};\n\nexport default Header;\n","import React, { Component } from 'react';\n\nexport class ItemStatusFilter extends Component {\n  links = [\n    {\n      name: 'all',\n      label: 'All',\n      url: '#/',\n    },\n    {\n      name: 'active',\n      label: 'Active',\n      url: '#/active',\n    },\n    {\n      name: 'completed',\n      label: 'Complete',\n      url: '#/completed',\n    },\n  ];\n\n  render() {\n    const { filter, onFilterChange } = this.props;\n\n    const links = this.links.map(({ name, label, url }) => {\n      const isActive = filter === name;\n      const classNames = isActive ? 'selected' : '';\n\n      return (\n        <a\n          href={url}\n          className={classNames}\n          key={name}\n          onClick={() => onFilterChange(name)}\n        >\n          {label}\n        </a>\n      );\n    });\n\n    return (\n      <ul className=\"filters\">\n        <li>\n          {links}\n        </li>\n      </ul>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ItemClearCompleted({ clearHandler, completedTodos }) {\n  return (\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={() => clearHandler(completedTodos)}\n    >\n      Clear completed\n    </button>\n  );\n}\n\nItemClearCompleted.propTypes = {\n  clearHandler: PropTypes.func.isRequired,\n  completedTodos: PropTypes.arrayOf.isRequired,\n};\n\nexport default ItemClearCompleted;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoLeftCounter({ todo, done }) {\n  return (\n    <span className=\"todo-count\">\n      {`${todo} items left, ${done} completed`}\n    </span>\n  );\n}\n\nTodoLeftCounter.propTypes = {\n  todo: PropTypes.number.isRequired,\n  done: PropTypes.number.isRequired,\n};\n\nexport default TodoLeftCounter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ItemStatusFilter } from './ItemStatusFilter/ItemStatusFilter';\nimport ItemClearCompleted from './ItemClearCompleted/ItemClearCompleted';\nimport TodoLeftCounter from './TodoLeftCounter/TodoLeftCounter';\n\nfunction Footer({\n  todosCount,\n  doneCount,\n  filter,\n  onFilterChange,\n  clearHandler,\n  completedTodos,\n}) {\n  return (\n    <footer className=\"footer\">\n      <TodoLeftCounter todo={todosCount} done={doneCount} />\n      <ul className=\"filters\">\n        <ItemStatusFilter filter={filter} onFilterChange={onFilterChange} />\n      </ul>\n      <ItemClearCompleted\n        clearHandler={clearHandler}\n        completedTodos={completedTodos}\n      />\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  todosCount: PropTypes.number.isRequired,\n  doneCount: PropTypes.number.isRequired,\n  filter: PropTypes.func.isRequired,\n  onFilterChange: PropTypes.func.isRequired,\n  clearHandler: PropTypes.func.isRequired,\n  completedTodos: PropTypes.arrayOf.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nexport class App extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n  }\n\n  deleteTodo = (id) => {\n    this.setState(({ todos }) => {\n      const index = todos.findIndex(todo => todo.id === id);\n\n      return {\n        todos: [...todos.slice(0, index), ...todos.slice(index + 1)],\n      };\n    });\n  };\n\n  addNewTodo = (text) => {\n    if (text.trim().length > 0) {\n      this.setState(prevState => ({\n        todos:\n        [\n          ...prevState.todos,\n          {\n            id: prevState.todos.length + 1,\n            todo: text,\n            completed: false,\n          },\n        ],\n      }));\n    }\n  }\n\n  toggleProperty = (arr, id) => {\n    const index = arr.findIndex(todo => todo.id === id);\n\n    return [\n      ...arr.slice(0, index),\n      {\n        ...arr[index],\n        completed: !arr[index].completed,\n      },\n      ...arr.slice(index + 1),\n    ];\n  };\n\n  onToggle = (id) => {\n    this.setState(({ todos }) => ({\n      todos: this.toggleProperty(todos, id),\n    }));\n  }\n\n  onToggleDoneAll = (todos) => {\n    todos.map(todo => this.onToggle(todo.id));\n  };\n\n  onFilterChange = (filter) => {\n    this.setState({ filter });\n  };\n\n  filterAll = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos,\n    }));\n  }\n\n  filterTodo = (items, filter) => {\n    switch (filter) {\n      case 'all':\n        return items;\n      case 'active':\n        return items.filter(item => !item.completed);\n      case 'completed':\n        return items.filter(item => item.completed === true);\n      default:\n        return items;\n    }\n  }\n\n  clearHandler = (completedTodos) => {\n    completedTodos.map(todo => this.deleteTodo(todo.id));\n  };\n\n  render() {\n    const { todos, filter } = this.state;\n\n    const visibleTodos = this.filterTodo(todos, filter);\n    const unCompletedTodos = todos.filter(todo => !todo.completed);\n    const todosCount = unCompletedTodos.length;\n    const completedTodos = todos.filter(todo => todo.completed);\n    const doneCount = completedTodos.length;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addNewTodo={this.addNewTodo}\n          todos={unCompletedTodos}\n          onToggleDoneAll={this.onToggleDoneAll}\n        />\n        <section className=\"main\">\n          <TodoList\n            todos={visibleTodos}\n            onDeleted={this.deleteTodo}\n            onToggle={this.onToggle}\n          />\n        </section>\n        {todos.length > 0 && (\n          <Footer\n            todosCount={todosCount}\n            doneCount={doneCount}\n            filter={filter}\n            onFilterChange={this.onFilterChange}\n            clearHandler={this.clearHandler}\n            completedTodos={completedTodos}\n          />\n        )}\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}